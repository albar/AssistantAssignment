@startuml

namespace Albar.Assignment.DataAbstractions {
    interface IAssistant
    {
        +int Id { get }
        +ImmutableArray<ISubject> Subjects { get }
    }
    
    interface ISchedule
    {
        +int Id { get }
        +ISubject Subject { get }
    }
    
    interface ISubject
    {
        +int Id { get }
        +ImmutableArray<IAssistant> Assistants { get }
        +ImmutableArray<ISchedule> Schedules { get }
        +int AssistantCountPerScheduleRequirement { get }
    }
}

hide Albar.Assignment.DataAbstractions
'hide Albar.Assignment.Abstractions

namespace Albar.Assignment.Abstractions {
    interface IReproductionSelection<T: Enum>
    
    interface IAssignmentChromosome<T: Enum>
    {
        +ImmutableArray<byte> Genotype { get }
        +IEnumerable<IScheduleSolutionRepresentation> Phenotype { get }
    }
    
    interface IAssistantCombination
    {
        +int Id { get }
        +ISubject Subject { get }
        +ImmutableArray<IAssistant> Assistants { get }
    }
    
    interface ICrossoverSelection<T: Enum>
    {
        +IEnumerable<PreparedCrossoverParent> SelectCrossoverParent(IEnumerable<IAssignmentChromosome<T>>, PopulationCapacity)
    }
    
    interface IDataRepository
    {
        +byte GeneSize { get }
        +ImmutableArray<ISubject> Subjects { get }
        +ImmutableArray<ISchedule> Schedules { get }
        +ImmutableArray<IAssistant> Assistants { get }
        +ImmutableArray<IAssistantCombination> AssistantCombinations { get }
    }
    
    interface IGenotypePhenotypeMapper<T: Enum>
    {
        +IDataRepository DataRepository { get }
        +IEnumerable<IScheduleSolutionRepresentation> ToSolution(IAssignmentChromosome<T>)
        +IEnumerable<IScheduleSolutionRepresentation> ToSolution(byte[])
        +IAssignmentChromosome<T> ToChromosome(IEnumerable<IScheduleSolutionRepresentation>)
        +IAssignmentChromosome<T> ToChromosome(byte[])
    }
    
    interface IMutationSelection<T: Enum>
    {
        +IEnumerable<PreparedMutationParent> SelectMutationParent(IEnumerable<IAssignmentChromosome<T>>, PopulationCapacity)
    }
    
    interface IObjectiveEvaluator<T: Enum>
    {
        +double Evaluate(IAssignmentChromosome<T>)
    }
    
    interface IScheduleSolutionRepresentation
    {
        +ISchedule Schedule { get }
        +IAssistantCombination AssistantCombination { get }
    }
    
    namespace Primitives {        
        class PreparedCrossoverParent<T: Enum> <<(S,#FF7700)>>
        {
            +ImmutableArray<bool> Schema { get } 
            +IAssignmentChromosome<T> Parent1 { get }
            +IAssignmentChromosome<T> Parent2 { get }
        }
        
        class PreparedMutationParent<T: Enum> <<(S,#FF7700)>>
        {
            +ImmutableArray<bool> Schema { get }
            +IAssignmentChromosome<T> Parent { get }
        }
    }
}

Albar.Assignment.DataAbstractions ---[hidden]> Albar.Assignment.Abstractions

@enduml